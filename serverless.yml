service: news-crawler

# Need SQS event triggers for lambdas
frameworkVersion: ">=1.28.0 <2.0.0"

plugins:
  - serverless-offline-python
  - serverless-python-requirements

provider:
  name: aws
  region: eu-west-1
  runtime: python3.6
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  deploymentBucket: mnd-serverless-deploys-${self:provider.stage}

  tags:
    owner: alexander.whillas@mynewsdesk.com
    project: mnd-news-crawler

  environment:
    PAGE_BUCKET: "${self:custom.pagesBucket}"
    PAGE_ADD_TOPIC:
      Fn::Join:
        - ":"
        - - "arn:aws:sns"
          - Ref: "AWS::Region"
          - Ref: "AWS::AccountId"
          - ${self:custom.onAddPageTopic}
    RSS_ADD_TOPIC:
      Fn::Join:
        - ":"
        - - "arn:aws:sns"
          - Ref: "AWS::Region"
          - Ref: "AWS::AccountId"
          - ${self:custom.onAddRssTopic}
    DISCOVER_ADD_TOPIC:
      Fn::Join:
        - ":"
        - - "arn:aws:sns"
          - Ref: "AWS::Region"
          - Ref: "AWS::AccountId"
          - ${self:custom.onAddDiscoverTopic}
    DISCOVER_QUEUE_URL:
      Ref: DiscoverQueue

  iamRoleStatements:
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource: { "Fn::Join" : [":", ["arn:aws:sns:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.onAddRssTopic}" ] ]  }
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource: { "Fn::Join" : [":", ["arn:aws:sns:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.onAddPageTopic}" ] ]  }
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource: { "Fn::Join" : [":", ["arn:aws:sns:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.onAddDiscoverTopic}" ] ]  }
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        Fn::GetAtt: [ RssQueue, Arn ]
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        Fn::GetAtt: [ PageQueue, Arn ]
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        Fn::GetAtt: [ DiscoverQueue, Arn ]
    - Effect: Allow
      Action:
        - s3:*
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: { "Fn::Join" : [":", ["arn:aws:dynamodb:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "*" ] ]  }

custom:
  defaultStage: dev
  profiles:
    dev: mnd-development
    prod: mnd-production
  onAddRssTopic: "${self:service}-on-add-rss-topic-${self:provider.stage}"
  onAddPageTopic: "${self:service}-on-add-page-topic-${self:provider.stage}"
  onAddDiscoverTopic: "${self:service}-on-add-discover-topic-${self:provider.stage}"
  dynamodbFeedTable: "mnd-${self:service}-rss-urls-${opt:stage, self:provider.stage}"
  dynamodbPageTable: "mnd-${self:service}-page-urls-${opt:stage, self:provider.stage}"
  dynamodbDiscoverTable: "mnd-${self:service}-discover-urls-${opt:stage, self:provider.stage}"
  pagesBucket: "mnd-${self:service}-${self:provider.stage}"

#   addUrlEndPoint > {Rss,Page}Queue (SQS) < pollUrlQueue > ingest{Rss,Page}
functions:

  # RSS Feed queue + consumer

  addRssEndPoint:
    handler: src.handler.add_url_http
    description: Web interface to add an RSS feed to the RSS Processing Queue via API Gateway
    events:
      - http:
          path: add_rss
          method: post
    environment:
      QUEUE_URL:
        Ref: RssQueue
      DYNAMODB_TABLE: ${self:custom.dynamodbFeedTable}

  addRssSns:
    handler: src.handler.add_url_sns
    description: SNS interface to add an RSS feed to the RSS Processing Queue via SNS topic
    events:
      - sns: ${self:custom.onAddRssTopic}
    environment:
      QUEUE_URL:
        Ref: RssQueue
      DYNAMODB_TABLE: "${self:custom.dynamodbFeedTable}"

  ingestRss:
    handler: src.handler.ingest_rss
    description: Processes the RSS URL adding the pages to the PageQueue for page ingestion
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - RssQueue
              - Arn
          batchSize: 10

  addAggregateRssEndPoint:
    handler: src.handler.ingest_aggregator_rss_http
    description: Web interface to add an Aggregator RSS feed to the RSS Processing Queue via API Gateway
    events:
      - http:
          path: add_agg_rss
          method: post
    environment:
      QUEUE_URL:
        Ref: RssQueue
      DYNAMODB_TABLE: ${self:custom.dynamodbFeedTable}

  # Discover queue + consumer

  addDiscoverEndPoint:
    handler: src.handler.add_url_http
    description: Web interface to add a Page to the Discover Processing Queue via API Gateway
    events:
      - http:
          path: add_page
          method: post
    environment:
      QUEUE_URL:
        Ref: DiscoverQueue
      DYNAMODB_TABLE: "${self:custom.dynamodbDiscoverTable}"

  addDiscoverSns:
    handler: src.handler.add_url_sns
    description: SNS interface to add a Page to the Discover Processing Queue via SNS topic
    events:
      - sns: ${self:custom.onAddDiscoverTopic}
    environment:
      QUEUE_URL:
        Ref: DiscoverQueue
      DYNAMODB_TABLE: "${self:custom.dynamodbDiscoverTable}"

  discoverFeeds:
    handler: src.handler.discover_feeds
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - DiscoverQueue
              - Arn
          batchSize: 10

  # Page queue + consumer

  addPageEndPoint:
    handler: src.handler.add_url_http
    description: Web interface to add a Page to the Page Processing Queue via API Gateway
    events:
      - http:
          path: add_page
          method: post
    environment:
      QUEUE_URL:
        Ref: PageQueue
      DYNAMODB_TABLE: "${self:custom.dynamodbPageTable}"

  addPageSns:
    handler: src.handler.add_url_sns
    description: SNS interface to add an Page to the Page Processing Queue via SNS topic
    events:
      - sns: ${self:custom.onAddPageTopic}
    environment:
      QUEUE_URL:
        Ref: PageQueue
      DYNAMODB_TABLE: "${self:custom.dynamodbPageTable}"

  ingestPage:
    handler: src.handler.ingest_page
    description: Processes the Webpage URL adding the pages to S3 for further processing (Spark?)
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - PageQueue
              - Arn
          batchSize: 10

  processPage:
    handler: src.handler.process_page
    events:
      - s3:
          bucket: ${self:custom.pagesBucket}
          event: s3:ObjectCreated:*


resources:
  Description: Lambda/SQS based web crawler that discovers RSS feeds and downloads the pages to S3
  Resources:
    RssQueue:
      Type: AWS::SQS::Queue

    PageQueue:
      Type: AWS::SQS::Queue

    DiscoverQueue:
      Type: AWS::SQS::Queue

    FeedsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: url
            AttributeType: S
        KeySchema:
          -
            AttributeName: url
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: "${self:custom.dynamodbFeedTable}"

    PagesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: url
            AttributeType: S
        KeySchema:
          -
            AttributeName: url
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: "${self:custom.dynamodbPageTable}"

    DiscoverDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: url
            AttributeType: S
        KeySchema:
          -
            AttributeName: url
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: "${self:custom.dynamodbDiscoverTable}"


